name: CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'DataIngestion/feature_extraction/pre_process/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'DataIngestion/feature_extraction/pre_process/**'
      - '.github/workflows/ci.yml'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    defaults:
      run:
        working-directory: ./DataIngestion/feature_extraction/pre_process
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv pip install -e ".[dev]"
    
    - name: Run linting
      run: |
        make lint
    
    - name: Run type checking
      run: |
        make typecheck
    
    - name: Run tests with coverage
      run: |
        uv run pytest --cov=. --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./DataIngestion/feature_extraction/pre_process/coverage.xml
        flags: preprocessing
        name: preprocessing-coverage

  integration-test:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    defaults:
      run:
        working-directory: ./DataIngestion/feature_extraction/pre_process
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        uv pip install -e ".[dev]"
    
    - name: Run integration tests
      env:
        PREPROCESSING_DB_HOST: localhost
        PREPROCESSING_DB_PORT: 5432
        PREPROCESSING_DB_NAME: test_db
        PREPROCESSING_DB_USER: postgres
        PREPROCESSING_DB_PASSWORD: postgres
      run: |
        uv run pytest -m integration -v

  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./DataIngestion/feature_extraction/pre_process
        file: ./DataIngestion/feature_extraction/pre_process/preprocess.dockerfile
        push: false
        tags: preprocessing:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max