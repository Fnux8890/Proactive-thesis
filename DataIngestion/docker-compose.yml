# Combined Docker Compose for DataIngestion (Rust + Python Pipelines)
# Located in DataIngestion/docker-compose.yml

services:
  # --- Rust Pipeline Services ---
  rust_pipeline:
    build:
      context: ./rust_pipeline # Adjusted build context
      dockerfile: Dockerfile
      args:
        CACHEBUST: ${CACHEBUST:-1}
    volumes:
      # Mount the data directory relative to DataIngestion parent
      - ../Data:/app/data:ro
      - ./rust_pipeline/pipeline_logs:/app/logs:rw # Adjusted path
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    environment:
      DATA_SOURCE_PATH: /app/data
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://postgres:postgres@db:5432/postgres
    networks:
      - ingestion-net

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data
    networks:
      - ingestion-net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Single Database Service (from rust_pipeline definition)
  db:
    image: timescale/timescaledb:latest-pg16
    restart: always
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      # Mount main init script first (for sensor_data table)
      - ./rust_pipeline/db_init/init.sql:/docker-entrypoint-initdb.d/00_init_sensor_data.sql:ro # Adjusted path
      # Mount script to create extra DBs needed by Python pipeline services
      - ./simulation_data_prep/create_extra_dbs.sql:/docker-entrypoint-initdb.d/01_create_extra_dbs.sql:ro # Adjusted path
      - postgres-data:/var/lib/postgresql/data
    ports:
      # Map container port 5432 to host port 5433 (from previous fix)
      - "5433:5432"
    networks:
      - ingestion-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@example.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_SETUP_EMAIL: "admin@example.com"
      PGADMIN_SETUP_PASSWORD: "admin"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./rust_pipeline/servers.json:/pgadmin4/servers.json:ro # Adjusted path
    ports:
      - "5050:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ingestion-net

  # --- Python Pipeline Services ---
  data-prep:
    build:
      context: ./simulation_data_prep # Adjusted build context
      dockerfile: Dockerfile
    env_file:
      - ./simulation_data_prep/.env # Adjusted path
    command: [ "prefect", "worker", "start", "-q", "default" ]
    environment:
      - PREFECT_API_URL=http://orion:4200/api
      # DATABASE_URL is loaded from .env file
    volumes:
      - ./simulation_data_prep/src:/app/src
      - ./simulation_data_prep/output:/app/output
      - ./simulation_data_prep/plant_config.json:/app/plant_config.json
      - ./simulation_data_prep/feast_repo:/app/feast_repo
      - ./simulation_data_prep/great_expectations:/app/great_expectations
      - prefect_data:/root/.prefect
    depends_on:
      db:
        # Depends on the single DB service
        condition: service_healthy
      orion:
        condition: service_started
      mlflow-server:
        condition: service_started
    networks:
      - ingestion-net

  orion:
    build:
      context: ./simulation_data_prep # Adjusted build context
      dockerfile: orion.Dockerfile # Relative path from context
    command: prefect server start
    ports:
      - "4200:4200"
    environment:
      - PREFECT_UI_API_URL=http://orion:4200/api
      # Use asyncpg dialect, points to single 'db' service
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://postgres:postgres@db:5432/prefect
    volumes:
      - prefect_db:/root/.prefect/
    depends_on:
      db:
        # Depends on the single DB service
        condition: service_healthy
    networks:
      - ingestion-net

  mlflow-server:
    build:
      context: ./simulation_data_prep # Adjusted build context
      dockerfile: mlflow.Dockerfile # Relative path from context
    command: >
      mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri postgresql+psycopg2://postgres:postgres@db:5432/mlflow --default-artifact-root /mlflow/artifacts
    ports:
      - "5001:5000"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - mlflow_data:/mlflow/artifacts
    depends_on:
      db:
        # Depends on the single DB service
        condition: service_healthy
    networks:
      - ingestion-net

  # Test service for Python pipeline unit tests
  test:
    build:
      context: ./simulation_data_prep # Adjusted build context
      dockerfile: Dockerfile
    env_file:
      - ./simulation_data_prep/.env # Adjusted path
    # Requires DB for config loading which might use DB implicitly? Keep depends_on for safety.
    depends_on:
      db:
        condition: service_healthy
    entrypoint: [ "pytest", "src/tests", "--maxfail=1", "--disable-warnings", "-q" ]
    networks:
      - ingestion-net

# --- Volumes ---
volumes:
  postgres-data:
  redis-data:
  pgadmin-data:
  prefect_data:
  prefect_db:
  mlflow_data:

    # --- Network ---
networks:
  ingestion-net:
    name: ingestion-net
    driver: bridge
