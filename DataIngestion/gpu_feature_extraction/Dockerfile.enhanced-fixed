# Enhanced Pipeline Dockerfile - Hybrid Rust + Python with GPU support
# Stage 1: Rust builder
FROM rust:1.87-slim AS rust-builder

RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    git \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy and build Rust
COPY Cargo.toml build.rs ./
COPY src ./src

# IMPORTANT: Ensure latest code is built
RUN touch src/main.rs && \
    RUST_LOG=debug cargo build --release --verbose

# Verify the binary was built and show help
RUN /app/target/release/gpu_feature_extraction --help || true

# Stage 2: Runtime with Python GPU support
FROM nvidia/cuda:12.4.1-cudnn-runtime-ubuntu22.04

# Install system dependencies
RUN apt-get update && apt-get install -y \
    libssl3 \
    ca-certificates \
    postgresql-client \
    python3.11 \
    python3-pip \
    python3.11-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set Python defaults
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

WORKDIR /app

# Copy Rust binary
COPY --from=rust-builder /app/target/release/gpu_feature_extraction /app/

# Install Python dependencies PROPERLY
COPY requirements-gpu.txt ./
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements-gpu.txt

# Verify Python packages
RUN python -c "import pandas, numpy, torch, cupy; print('All packages installed!')"

# Copy Python scripts
COPY *.py ./

# Make Python scripts executable
RUN chmod +x *.py

# Create required directories
RUN mkdir -p /app/data /app/checkpoints /app/logs

ENV PYTHONUNBUFFERED=1
ENV RUST_LOG=info
ENV RUST_BACKTRACE=1
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}

ENTRYPOINT ["/app/gpu_feature_extraction"]