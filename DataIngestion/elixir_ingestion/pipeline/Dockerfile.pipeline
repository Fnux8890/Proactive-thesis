# Build Stage
# Use the full Debian-based image
FROM elixir:1.18.3 AS build

# Install build dependencies using apt-get
# Clean up apt cache afterwards
RUN apt-get update && apt-get install -y --no-install-recommends build-essential git ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Set the flags to completely disable time correction
# ENV ERL_FLAGS="+c false"
# ENV ERL_AFLAGS="+c false"

# Set environment variables for building
ENV MIX_ENV=dev
ENV MIX_DEPS_PATH=/app/deps
ENV MIX_BUILD_PATH=/app/_build

WORKDIR /app

# --- Dependency Caching Optimization ---
# 1. Copy only dependency definition files
COPY mix.exs mix.lock ./

# 2. Create mix.exs if it doesn't exist (only runs if mix.exs wasn't copied)
#    (Note: This logic might be less useful now if mix.exs is always expected)
RUN if [ ! -f mix.exs ]; then \
      mix new . --sup --app pipeline && \
      sed -i 's/defp deps do/defp deps do\n    [\n      {:redix, "~> 1.1"},\n      {:jason, "~> 1.4"}\n      # Add other deps here if needed\n    ]/' mix.exs && \
      sed -i 's/deps: deps()/deps: deps(),\n      releases: [\n        pipeline: [\n          include_executables_for: [:unix],\n          applications: [runtime_tools: :permanent]\n        ]\n      ]/' mix.exs; \
    fi

# 3. Fetch and compile dependencies in separate steps
# These will now run with ERL_FLAGS set
RUN mix deps.get --only prod
RUN mix deps.compile

# --- Application Build ---
# 4. Copy the rest of the application code
COPY . .

# 5. Compile the application (already compiled deps won't be recompiled)
RUN mix compile

# Create the release AND verify directory existence in one step
# If mix release fails, this whole step fails and shows output
RUN mix release && ls -la /app/_build/rel/

# --- Runtime Stage ---
# Use the full Debian-based image for runtime as well for consistency
FROM elixir:1.18.3 AS app

# Install runtime dependencies (full image has many pre-installed)
# Only install essentials if not already present
RUN apt-get update && apt-get install -y --no-install-recommends curl wget \
    && rm -rf /var/lib/apt/lists/*

ENV LANG=C.UTF-8
ENV MIX_ENV=dev

WORKDIR /app

# Create directories
RUN mkdir -p /app/data /app/results

# Copy release from build stage (using corrected path)
COPY --from=build /app/_build/rel/pipeline ./

# Set proper permissions (Run as non-root)
# Create a non-root user and group
RUN groupadd -g 1000 appuser && \
    useradd -u 1000 -g 1000 -ms /bin/bash appuser
RUN chown -R appuser:appuser /app
USER appuser

# Set default command
ENTRYPOINT ["/app/bin/pipeline", "start"]