defmodule WebServiceWeb.DashboardLive do
  use Phoenix.LiveView
  alias WebService.ResultsMonitor
  import Phoenix.Component
  # Path helpers
  use WebServiceWeb, :verified_routes

  def mount(_params, _session, socket) do
    if connected?(socket) do
      # Set up timer to refresh data every 10 seconds
      :timer.send_interval(10_000, self(), :refresh_data)
    end

    jobs = ResultsMonitor.get_all_jobs()
    status_counts = get_status_counts(jobs)
    pipeline_stages = [
      %{name: "FileWatcher", count: 0, status: :idle, icon: "heroicons-outline:folder-open"},
      %{name: "Producer", count: 0, status: :idle, icon: "heroicons-outline:collection"},
      %{name: "Processor", count: 0, status: :idle, icon: "heroicons-outline:cog"},
      %{name: "SchemaInference", count: 0, status: :idle, icon: "heroicons-outline:table"},
      %{name: "DataProfiler", count: 0, status: :idle, icon: "heroicons-outline:chart-bar"},
      %{name: "TimeSeriesProcessor", count: 0, status: :idle, icon: "heroicons-outline:clock"},
      %{name: "Validator", count: 0, status: :idle, icon: "heroicons-outline:check-circle"},
      %{name: "MetaDataEnricher", count: 0, status: :idle, icon: "heroicons-outline:tag"},
      %{name: "Transformer", count: 0, status: :idle, icon: "heroicons-outline:refresh"},
      %{name: "Writer", count: 0, status: :idle, icon: "heroicons-outline:pencil-alt"},
      %{name: "TimescaleDB", count: 0, status: :idle, icon: "heroicons-outline:database"}
    ]
    
    # Generate sample activity logs - in a real application, these would come from your logging system
    activity_logs = [
      %{
        id: "log-1",
        timestamp: DateTime.add(DateTime.utc_now(), -2, :minute),
        level: :info, 
        component: "FileWatcher",
        message: "Detected new CSV file 'sales_data_2023.csv'"
      },
      %{
        id: "log-2",
        timestamp: DateTime.add(DateTime.utc_now(), -5, :minute),
        level: :info,
        component: "Producer",
        message: "Started processing job #1234 for file 'sales_data_2023.csv'"
      },
      %{
        id: "log-3",
        timestamp: DateTime.add(DateTime.utc_now(), -15, :minute),
        level: :warning,
        component: "SchemaInference",
        message: "Ambiguous column type detected for 'customer_id'"
      },
      %{
        id: "log-4",
        timestamp: DateTime.add(DateTime.utc_now(), -30, :minute),
        level: :error,
        component: "Validator", 
        message: "Failed to validate row 123: missing required field 'timestamp'"
      }
    ]

    {:ok, assign(socket,
      jobs: jobs,
      status_counts: status_counts,
      pipeline_stages: pipeline_stages,
      current_time: DateTime.utc_now(),
      page_title: "Data Pipeline Dashboard",
      show_stage_modal: false,
      selected_stage: nil,
      stage_description: nil,
      stage_metrics: nil,
      filtered_status: :all,
      last_refresh: DateTime.utc_now(),
      activity_logs: activity_logs
    )}
  end

  def handle_info(:refresh_data, socket) do
    updated_jobs = ResultsMonitor.get_all_jobs()
    status_counts = get_status_counts(updated_jobs)
    
    # Update pipeline stages based on active jobs
    pipeline_stages = update_pipeline_stages(socket.assigns.pipeline_stages, updated_jobs)

    # Filter jobs based on current filter status
    filtered_jobs = filter_jobs(updated_jobs, socket.assigns.filtered_status)

    {:noreply, assign(socket, 
      jobs: filtered_jobs, 
      status_counts: status_counts,
      pipeline_stages: pipeline_stages,
      current_time: DateTime.utc_now(),
      last_refresh: DateTime.utc_now()
    )}
  end

  def handle_info({:job_updated, job}, socket) do
    # Update the jobs list when a job is updated
    updated_jobs = 
      socket.assigns.jobs
      |> Enum.reject(fn j -> j.id == job.id end)
      |> Enum.concat([job])
      |> Enum.sort_by(fn j -> 
        j.started_at || DateTime.from_iso8601("2000-01-01T00:00:00Z") |> elem(1)
      end, {:desc, DateTime})
    
    # Update status counts
    status_counts = get_status_counts(updated_jobs)
    
    # Update pipeline stages based on active jobs
    pipeline_stages = update_pipeline_stages(socket.assigns.pipeline_stages, updated_jobs)

    # Filter jobs based on current filter status
    filtered_jobs = filter_jobs(updated_jobs, socket.assigns.filtered_status)

    {:noreply, assign(socket, 
      jobs: filtered_jobs, 
      status_counts: status_counts,
      pipeline_stages: pipeline_stages,
      current_time: DateTime.utc_now()
    )}
  end

  # Compute status counts for metrics
  defp get_status_counts(jobs) do
    initial_counts = %{pending: 0, processing: 0, completed: 0, failed: 0, total: 0}
    
    Enum.reduce(jobs, initial_counts, fn job, acc ->
      status = job.status
      # Update the specific status count and the total
      acc
      |> Map.update(status, 1, &(&1 + 1))
      |> Map.update(:total, 1, &(&1 + 1))
    end)
  end
  
  # Update pipeline stages based on job status
  defp update_pipeline_stages(stages, jobs) do
    # Reset counts
    stages_with_reset = Enum.map(stages, fn stage -> Map.put(stage, :count, 0) end)
    
    # Count jobs in each stage
    Enum.reduce(jobs, stages_with_reset, fn job, acc ->
      # This is simplified - in a real system, you'd track which stage each job is in
      # For demo, we'll just simulate based on job status
      current_stage = case job.status do
        :pending -> "FileWatcher"
        :processing -> "Processor" 
        :completed -> "TimescaleDB"
        :failed -> "Validator" # Assuming most failures happen in validation
        _ -> nil
      end
      
      if current_stage do
        Enum.map(acc, fn stage ->
          if stage.name == current_stage do
            stage
            |> Map.update(:count, 1, &(&1 + 1))
            |> Map.put(:status, :active)
          else
            stage
          end
        end)
      else
        acc
      end
    end)
  end

  def render(assigns) do
    ~H"""
    <div class="min-h-screen bg-gray-50">
      <div class="container mx-auto px-4 py-8">
        <div class="p-6 bg-white border-b border-gray-200 shadow-sm mb-6 rounded-lg">
          <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between">
            <div>
              <h1 class="text-3xl font-bold text-gray-800">Data Pipeline Dashboard</h1>
              <p class="mt-2 text-gray-600">
                Real-time monitoring for the Elixir data ingestion pipeline
              </p>
            </div>
            <div class="mt-4 sm:mt-0 flex flex-col sm:flex-row items-end space-y-2 sm:space-y-0 sm:space-x-4">
              <div class="text-sm text-gray-500 whitespace-nowrap">
                Last refreshed: <%= format_datetime(@last_refresh) %>
              </div>
              <button phx-click="manual_refresh" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Refresh
              </button>
            </div>
          </div>
        </div>

        <!-- Status Overview Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div class="bg-white rounded-lg shadow p-6 hover:shadow-md transition-shadow">
            <div class="flex items-center">
              <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
              </div>
              <div class="ml-4">
                <h2 class="text-gray-600 text-sm font-medium">Total Jobs</h2>
                <p class="text-2xl font-semibold text-gray-800"><%= @status_counts.total %></p>
                <%= if @status_counts.total == 0 do %>
                  <p class="text-xs text-gray-500 mt-1">No jobs processed yet</p>
                <% end %>
              </div>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow p-6 hover:shadow-md transition-shadow">
            <div class="flex items-center">
              <div class="p-3 rounded-full bg-yellow-100 text-yellow-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div class="ml-4">
                <h2 class="text-gray-600 text-sm font-medium">Pending</h2>
                <p class="text-2xl font-semibold text-gray-800"><%= @status_counts.pending %></p>
                <%= if @status_counts.pending == 0 and @status_counts.total > 0 do %>
                  <p class="text-xs text-gray-500 mt-1">No pending jobs</p>
                <% end %>
              </div>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow p-6 hover:shadow-md transition-shadow">
            <div class="flex items-center">
              <div class="p-3 rounded-full bg-green-100 text-green-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <div class="ml-4">
                <h2 class="text-gray-600 text-sm font-medium">Completed</h2>
                <p class="text-2xl font-semibold text-gray-800"><%= @status_counts.completed %></p>
                <%= if @status_counts.completed == 0 and @status_counts.total > 0 do %>
                  <p class="text-xs text-gray-500 mt-1">No completed jobs yet</p>
                <% end %>
              </div>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow p-6 hover:shadow-md transition-shadow">
            <div class="flex items-center">
              <div class="p-3 rounded-full bg-red-100 text-red-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
              </div>
              <div class="ml-4">
                <h2 class="text-gray-600 text-sm font-medium">Failed</h2>
                <p class="text-2xl font-semibold text-gray-800"><%= @status_counts.failed %></p>
                <%= if @status_counts.failed == 0 and @status_counts.total > 0 do %>
                  <p class="text-xs text-text-gray-500 mt-1">No failures detected</p>
                <% end %>
              </div>
            </div>
          </div>
        </div>

        <!-- Pipeline Visualization -->
        <div class="grid grid-cols-1 md:grid-cols-5 gap-4 mb-8">
          <div class="col-span-1 md:col-span-5">
            <div class="bg-white p-6 rounded-lg shadow-md">
              <h2 class="text-xl font-semibold mb-6">Pipeline Flow</h2>
              
              <div class="overflow-x-auto">
                <div class="flex items-center space-x-4 min-w-max pipeline-flow-container py-4">
                  <%= for {stage, index} <- Enum.with_index(@pipeline_stages) do %>
                    <!-- Stage node -->
                    <div class="flex flex-col items-center">
                      <div 
                        class="relative w-28 h-20 rounded-lg flex flex-col items-center justify-center cursor-pointer shadow-sm transition-transform hover:shadow hover:-translate-y-1 duration-200"
                        phx-click="show_stage_details"
                        phx-value-stage="<%= stage.name %>"
                        style="<%= get_stage_background_style(stage.status) %>"
                      >
                        <div class="<%= get_stage_icon_class(stage.status) %>">
                          <%= case stage.name do %>
                            <% "FileWatcher" -> %>
                              <i class="fas fa-folder-open"></i>
                            <% "Producer" -> %>
                              <i class="fas fa-stream"></i>
                            <% "Processor" -> %>
                              <i class="fas fa-cogs"></i>
                            <% "SchemaInference" -> %>
                              <i class="fas fa-table"></i>
                            <% "DataProfiler" -> %>
                              <i class="fas fa-chart-pie"></i>
                            <% "TimeSeriesProcessor" -> %>
                              <i class="fas fa-clock"></i>
                            <% "Validator" -> %>
                              <i class="fas fa-check-circle"></i>
                            <% "MetaDataEnricher" -> %>
                              <i class="fas fa-tags"></i>
                            <% "Transformer" -> %>
                              <i class="fas fa-exchange-alt"></i>
                            <% "Writer" -> %>
                              <i class="fas fa-pen-fancy"></i>
                            <% "TimescaleDB" -> %>
                              <i class="fas fa-database"></i>
                            <% _ -> %>
                              <i class="fas fa-cube"></i>
                          <% end %>
                        </div>
                        <div class="text-xs font-medium mt-1"><%= stage.name %></div>
                        
                        <!-- Processing indicator dot -->
                        <%= if stage.status == :active do %>
                          <div class="absolute -top-1 -right-1 w-3 h-3 rounded-full bg-blue-500 animate-pulse"></div>
                        <% end %>
                        
                        <!-- Status indicator at bottom -->
                        <div class="absolute bottom-0 left-0 right-0 h-1 rounded-b-lg <%= get_stage_indicator_class(stage.status) %>"></div>
                      </div>
                      
                      <!-- Stage name label -->
                      <div class="text-xs text-gray-500 mt-2 text-center max-w-xs truncate">
                        <%= stage.name %>
                      </div>
                    </div>
                    
                    <!-- Connector between stages -->
                    <%= if index < length(@pipeline_stages) - 1 do %>
                      <div class="connector-line flex items-center relative">
                        <!-- Static connector line -->
                        <div class="w-12 h-0.5 bg-gray-300"></div>
                        
                        <!-- Animated data flow indicator -->
                        <%= if stage.status in [:active, :completed] do %>
                          <div class="data-flow absolute inset-0 flex items-center justify-center">
                            <i class="fas fa-chevron-right text-blue-500 data-flow-indicator"></i>
                          </div>
                        <% end %>
                      </div>
                    <% end %>
                  <% end %>
                </div>
              </div>
              
              <!-- Legend -->
              <div class="mt-4 flex flex-wrap gap-x-6 text-sm text-gray-600 justify-center">
                <div class="flex items-center">
                  <div class="w-3 h-3 rounded-full bg-gray-500 mr-2"></div>
                  <span>Idle</span>
                </div>
                <div class="flex items-center">
                  <div class="w-3 h-3 rounded-full bg-blue-500 mr-2 animate-pulse"></div>
                  <span>Active</span>
                </div>
                <div class="flex items-center">
                  <div class="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                  <span>Completed</span>
                </div>
                <div class="flex items-center">
                  <div class="w-3 h-3 rounded-full bg-red-500 mr-2"></div>
                  <span>Failed</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Activity Log -->
        <div class="bg-white shadow rounded-lg p-6 mb-8">
          <h2 class="text-xl font-semibold mb-6">Activity Log</h2>
          <div class="overflow-x-auto">
            <table class="min-w-full bg-white">
              <thead class="bg-gray-100">
                <tr>
                  <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
                  <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Component</th>
                  <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Level</th>
                  <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Message</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-gray-200">
                <%= for log <- @activity_logs do %>
                  <tr class="hover:bg-gray-50">
                    <td class="py-4 px-4 text-sm text-gray-900 font-medium"><%= format_datetime(log.timestamp) %></td>
                    <td class="py-4 px-4 text-sm text-gray-500"><%= log.component %></td>
                    <td class="py-4 px-4 text-sm">
                      <span class={get_log_level_class(log.level)}>
                        <%= String.upcase(to_string(log.level)) %>
                      </span>
                    </td>
                    <td class="py-4 px-4 text-sm text-gray-500"><%= log.message %></td>
                  </tr>
                <% end %>
              </tbody>
            </table>
          </div>
        </div>

        <!-- Processing Jobs -->
        <div class="bg-white shadow rounded-lg p-6">
          <h2 class="text-xl font-semibold mb-6 flex items-center">
            <span>Processing Jobs</span>
            <span class="ml-2 text-sm bg-blue-100 text-blue-800 py-0.5 px-2 rounded-full"><%= @status_counts.total %></span>
          </h2>
          
          <%= if Enum.empty?(@jobs) do %>
            <div class="bg-gray-50 p-6 rounded border text-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <h3 class="text-gray-700 font-medium mb-2">No processing jobs</h3>
              <p class="text-gray-500 max-w-md mx-auto mb-4">
                Get started by processing your first data file.
              </p>
              <div class="bg-gray-100 rounded p-3 text-sm text-gray-700 font-mono mb-3 flex items-center justify-between max-w-lg mx-auto">
                <code>elixir process_data_file.exs /path/to/your/data/file.csv</code>
                <button 
                  class="bg-gray-200 hover:bg-gray-300 p-1 rounded ml-2" 
                  title="Copy to clipboard"
                  phx-click="copy_command"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                </button>
              </div>
              <a href="#" class="text-blue-600 hover:text-blue-800 text-sm font-medium">Learn more about data pipeline setup →</a>
            </div>
          <% else %>
            <div class="overflow-x-auto">
              <table class="min-w-full bg-white">
                <thead class="bg-gray-100">
                  <tr>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">File</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Started</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Completed</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-gray-200">
                  <%= for job <- @jobs do %>
                    <tr class="hover:bg-gray-50">
                      <td class="py-4 px-4 text-sm text-gray-900 font-medium"><%= job.id %></td>
                      <td class="py-4 px-4 text-sm text-gray-500">
                        <div class="flex items-center">
                          <svg class="flex-shrink-0 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd" />
                          </svg>
                          <span class="ml-2 truncate"><%= Path.basename(job.file_path) %></span>
                        </div>
                      </td>
                      <td class="py-4 px-4 text-sm">
                        <span class={status_badge_class(job.status)}>
                          <%= String.upcase(to_string(job.status)) %>
                        </span>
                      </td>
                      <td class="py-4 px-4 text-sm text-gray-500"><%= format_datetime(job.started_at) %></td>
                      <td class="py-4 px-4 text-sm text-gray-500"><%= format_datetime(job.completed_at) %></td>
                      <td class="py-4 px-4 text-sm">
                        <.link navigate={~p"/jobs/#{job.id}"} class="text-blue-600 hover:text-blue-900 font-medium">
                          View Details
                        </.link>
                      </td>
                    </tr>
                  <% end %>
                </tbody>
              </table>
            </div>
          <% end %>
        </div>
      </div>
    </div>

    <%= if @show_stage_modal do %>
      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
          <div class="bg-white rounded-lg max-w-xl w-full overflow-hidden shadow-xl">
            <!-- Modal header -->
            <div class="bg-blue-50 px-6 py-4 flex items-center">
              <div class="mr-4 bg-blue-100 rounded-full p-2">
                <%= case @selected_stage.name do %>
                  <% "FileWatcher" -> %>
                    <i class="fas fa-folder-open text-blue-600 text-xl"></i>
                  <% "Producer" -> %>
                    <i class="fas fa-stream text-blue-600 text-xl"></i>
                  <% "Processor" -> %>
                    <i class="fas fa-cogs text-blue-600 text-xl"></i>
                  <% "SchemaInference" -> %>
                    <i class="fas fa-table text-blue-600 text-xl"></i>
                  <% "DataProfiler" -> %>
                    <i class="fas fa-chart-pie text-blue-600 text-xl"></i>
                  <% "TimeSeriesProcessor" -> %>
                    <i class="fas fa-clock text-blue-600 text-xl"></i>
                  <% "Validator" -> %>
                    <i class="fas fa-check-circle text-blue-600 text-xl"></i>
                  <% "MetaDataEnricher" -> %>
                    <i class="fas fa-tags text-blue-600 text-xl"></i>
                  <% "Transformer" -> %>
                    <i class="fas fa-exchange-alt text-blue-600 text-xl"></i>
                  <% "Writer" -> %>
                    <i class="fas fa-pen-fancy text-blue-600 text-xl"></i>
                  <% "TimescaleDB" -> %>
                    <i class="fas fa-database text-blue-600 text-xl"></i>
                  <% _ -> %>
                    <i class="fas fa-cube text-blue-600 text-xl"></i>
                <% end %>
              </div>
              <h3 class="text-lg font-bold text-gray-900 flex-1">
                <%= @stage_description.title %>
              </h3>
              <button phx-click="close_stage_modal" class="text-gray-500 hover:text-gray-700">
                <i class="fas fa-times"></i>
              </button>
            </div>
            
            <!-- Modal body -->
            <div class="p-6">
              <p class="text-gray-600 mb-6"><%= @stage_description.description %></p>
              
              <!-- Responsibilities -->
              <div class="mb-6">
                <h4 class="font-semibold text-gray-800 mb-2">Responsibilities</h4>
                <ul class="list-disc pl-5 text-gray-600 space-y-1">
                  <%= for responsibility <- @stage_description.responsibilities do %>
                    <li><%= responsibility %></li>
                  <% end %>
                </ul>
              </div>
              
              <!-- Configuration -->
              <div class="mb-6">
                <h4 class="font-semibold text-gray-800 mb-2">Configuration</h4>
                <div class="bg-gray-50 p-3 rounded-lg text-sm font-mono border border-gray-200">
                  <%= @stage_description.configuration %>
                </div>
              </div>
              
              <!-- Metrics -->
              <div>
                <h4 class="font-semibold text-gray-800 mb-2">Performance Metrics</h4>
                <div class="grid grid-cols-2 gap-4">
                  <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
                    <div class="text-sm text-gray-500">Jobs Processed</div>
                    <div class="text-lg font-bold"><%= @stage_metrics.jobs_processed %></div>
                  </div>
                  <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
                    <div class="text-sm text-gray-500">Avg. Processing Time</div>
                    <div class="text-lg font-bold"><%= @stage_metrics.avg_processing_time %> ms</div>
                  </div>
                  <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
                    <div class="text-sm text-gray-500">Success Rate</div>
                    <div class="text-lg font-bold"><%= @stage_metrics.success_rate %>%</div>
                  </div>
                  <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
                    <div class="text-sm text-gray-500">Data Volume</div>
                    <div class="text-lg font-bold"><%= @stage_metrics.data_volume %></div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Modal footer -->
            <div class="bg-gray-50 px-6 py-4 flex justify-end">
              <button phx-click="close_stage_modal" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md">
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    <% end %>
    """
  end

  # Event handlers for interactive elements
  
  def handle_event("copy_command", _params, socket) do
    {:noreply, socket |> put_flash(:info, "Command copied to clipboard")}
  end
  
  def handle_event("show_stage_details", %{"stage" => stage_name}, socket) do
    # Find the selected stage
    selected_stage = Enum.find(socket.assigns.pipeline_stages, fn s -> s.name == stage_name end)
    
    # Get a description for the stage
    stage_description = get_stage_description(stage_name)
    stage_metrics = get_stage_metrics(stage_name, socket.assigns.jobs)
    
    socket = socket
      |> assign(:selected_stage, selected_stage)
      |> assign(:stage_description, stage_description)
      |> assign(:stage_metrics, stage_metrics)
      |> assign(:show_stage_modal, true)
    
    {:noreply, socket}
  end
  
  def handle_event("close_stage_modal", _params, socket) do
    {:noreply, assign(socket, :show_stage_modal, false)}
  end
  
  def handle_event("filter_jobs", %{"status" => status}, socket) do
    filtered_status = String.to_atom(status)
    
    jobs = 
      if filtered_status == :all do
        ResultsMonitor.get_all_jobs()
      else
        ResultsMonitor.get_all_jobs()
        |> Enum.filter(fn job -> job.status == filtered_status end)
      end
    
    {:noreply, assign(socket, :jobs, jobs, :filtered_status, filtered_status)}
  end
  
  def handle_event("manual_refresh", _params, socket) do
    send(self(), :refresh_data)
    {:noreply, socket |> put_flash(:info, "Dashboard refreshed")}
  end

  # Helper functions for pipeline stage details
  
  defp get_stage_description(stage_name) do
    case stage_name do
      "FileWatcher" ->
        %{
          title: "File Watcher",
          description: "Monitors directories for new or modified data files. Supports CSV, JSON, and XML formats.",
          responsibilities: [
            "Detects and validates new data files",
            "Triggers processing pipeline on file changes",
            "Handles file locking during processing"
          ],
          configuration: "Configure watched directories in config/file_watcher.exs"
        }
      "Producer" ->
        %{
          title: "Producer",
          description: "First stage in the GenStage processing pipeline. Reads files and produces data chunks for downstream processing.",
          responsibilities: [
            "Manages backpressure in the pipeline",
            "Chunks large files for parallel processing",
            "Prioritizes critical data sources"
          ],
          configuration: "Configure chunk size and priority rules in config/producer.exs"
        }
      "Processor" ->
        %{
          title: "Processor",
          description: "Type-specific processor that handles different data formats (CSV, JSON, XML).",
          responsibilities: [
            "Parses raw data into structured format",
            "Applies format-specific normalization",
            "Detects and handles encoding issues"
          ],
          configuration: "Configure parsing options in config/processor.exs"
        }
      "SchemaInference" ->
        %{
          title: "Schema Inference",
          description: "Automatically infers data schema from samples, identifying data types and relationships.",
          responsibilities: [
            "Determines column data types",
            "Identifies primary and foreign keys",
            "Generates schema definitions for downstream processes"
          ],
          configuration: "Configure inference rules in config/schema_inference.exs"
        }
      "DataProfiler" ->
        %{
          title: "Data Profiler",
          description: "Analyzes data quality, completeness, and statistical properties.",
          responsibilities: [
            "Calculates descriptive statistics",
            "Detects outliers and anomalies",
            "Measures data completeness and quality"
          ],
          configuration: "Configure profiling thresholds in config/data_profiler.exs"
        }
      "TimeSeriesProcessor" ->
        %{
          title: "Time Series Processor",
          description: "Specialized processor for time series data with advanced temporal analytics.",
          responsibilities: [
            "Handles timestamp parsing and normalization",
            "Detects seasonality and trends",
            "Fills gaps in time series data"
          ],
          configuration: "Configure time series options in config/time_series.exs"
        }
      "Validator" ->
        %{
          title: "Validator",
          description: "Validates data against business rules and schema constraints.",
          responsibilities: [
            "Checks data against validation rules",
            "Enforces referential integrity",
            "Flags records that fail validation"
          ],
          configuration: "Configure validation rules in config/validator.exs"
        }
      "MetaDataEnricher" ->
        %{
          title: "Metadata Enricher",
          description: "Enhances data with additional context and metadata from external sources.",
          responsibilities: [
            "Adds processing metadata",
            "Attaches source information",
            "Enriches data with system timestamps"
          ],
          configuration: "Configure enrichment sources in config/metadata_enricher.exs"
        }
      "Transformer" ->
        %{
          title: "Transformer",
          description: "Applies transformations to prepare data for analysis and storage.",
          responsibilities: [
            "Restructures data for target schema",
            "Applies business logic transformations",
            "Optimizes data for TimescaleDB storage"
          ],
          configuration: "Configure transformations in config/transformer.exs"
        }
      "Writer" ->
        %{
          title: "Writer",
          description: "Writes processed data to TimescaleDB with efficient batch operations.",
          responsibilities: [
            "Manages database transactions",
            "Optimizes write operations",
            "Handles retry logic for failed writes"
          ],
          configuration: "Configure batch size and retry policy in config/writer.exs"
        }
      "TimescaleDB" ->
        %{
          title: "TimescaleDB",
          description: "Specialized PostgreSQL database optimized for time-series data.",
          responsibilities: [
            "Stores processed data in optimized format",
            "Manages data partitioning and retention",
            "Provides efficient query capabilities"
          ],
          configuration: "Configure hypertables and retention policies in database migrations"
        }
      _ ->
        %{
          title: stage_name,
          description: "Pipeline component",
          responsibilities: ["Processing data"],
          configuration: "See configuration files"
        }
    end
  end
  
  defp get_stage_metrics(stage_name, jobs) do
    # This would be enhanced with real metrics in a production system
    # For now, we'll simulate some metrics based on job data
    
    # Count jobs that went through this stage
    jobs_count = Enum.count(jobs, fn job -> 
      # In a real system, you'd track which stage each job passed through
      # For demo purposes, we'll use a simple heuristic
      case stage_name do
        "FileWatcher" -> true  # All jobs go through FileWatcher
        "TimescaleDB" -> job.status == :completed  # Only completed jobs reach DB
        "Validator" -> job.status in [:completed, :failed]  # All jobs that didn't fail earlier
        _ -> job.status in [:processing, :completed]  # All jobs that at least started processing
      end
    end)
    
    # Simulate average processing time (ms)
    avg_processing_time = if jobs_count > 0, do: :rand.uniform(300) + 100, else: 0
    
    # Success rate (%)
    success_rate = if jobs_count > 0, do: :rand.uniform(40) + 60, else: 0
    
    %{
      jobs_processed: jobs_count,
      avg_processing_time: avg_processing_time,
      success_rate: success_rate,
      data_volume: "#{:rand.uniform(100) + 10} KB"
    }
  end

  # Helper functions for formatting

  defp status_badge_class(status) do
    base_classes = "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"
    
    status_specific = case status do
      :pending -> "bg-yellow-100 text-yellow-800"
      :processing -> "bg-blue-100 text-blue-800"
      :completed -> "bg-green-100 text-green-800"
      :failed -> "bg-red-100 text-red-800"
      _ -> "bg-gray-100 text-gray-800"
    end
    
    "#{base_classes} #{status_specific}"
  end
  
  defp get_stage_background_style(status) do
    case status do
      :idle -> "background-color: #f9fafb; border: 1px solid #e5e7eb;"
      :active -> "background-color: #eff6ff; border: 1px solid #93c5fd;"
      :completed -> "background-color: #f0fdf4; border: 1px solid #86efac;"
      :failed -> "background-color: #fef2f2; border: 1px solid #fca5a5;"
      _ -> "background-color: #f9fafb; border: 1px solid #e5e7eb;"
    end
  end
  
  defp get_stage_icon_class(status) do
    base_class = "text-xl"
    case status do
      :idle -> "#{base_class} text-gray-400"
      :active -> "#{base_class} text-blue-500"
      :completed -> "#{base_class} text-green-500"
      :failed -> "#{base_class} text-red-500"
      _ -> "#{base_class} text-gray-400"
    end
  end
  
  defp get_stage_indicator_class(status) do
    case status do
      :idle -> "bg-gray-300"
      :active -> "bg-blue-500"
      :completed -> "bg-green-500"
      :failed -> "bg-red-500"
      _ -> "bg-gray-300"
    end
  end
  
  defp get_log_level_class(level) do
    case level do
      :info -> "bg-blue-100 text-blue-800"
      :warning -> "bg-yellow-100 text-yellow-800"
      :error -> "bg-red-100 text-red-800"
      _ -> "bg-gray-100 text-gray-800"
    end
  end

  defp format_datetime(nil), do: "-"
  defp format_datetime(datetime) when is_binary(datetime) do
    case DateTime.from_iso8601(datetime) do
      {:ok, dt, _} -> format_datetime(dt)
      _ -> datetime
    end
  end
  defp format_datetime(datetime) do
    Calendar.strftime(datetime, "%Y-%m-%d %H:%M:%S")
  end

  defp filter_jobs(jobs, :all), do: jobs
  defp filter_jobs(jobs, status), do: Enum.filter(jobs, fn job -> job.status == status end)
end

<style>
  /* Pipeline flow animation */
  @keyframes flow {
    0% { opacity: 0; transform: translateX(-4px); }
    50% { opacity: 1; }
    100% { opacity: 0; transform: translateX(4px); }
  }
  
  .data-flow-indicator {
    animation: flow 1.2s infinite;
  }
  
  .pipeline-flow-container {
    scrollbar-width: thin;
    scrollbar-color: #cbd5e1 #f1f5f9;
  }
  
  .pipeline-flow-container::-webkit-scrollbar {
    height: 6px;
  }
  
  .pipeline-flow-container::-webkit-scrollbar-track {
    background: #f1f5f9;
  }
  
  .pipeline-flow-container::-webkit-scrollbar-thumb {
    background-color: #cbd5e1;
    border-radius: 3px;
  }
</style>
